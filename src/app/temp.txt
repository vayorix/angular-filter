<div class="query-builder">
    <div class="actions">
      <button class="btn add-group" (click)="addGroup()">+ Add Group</button>
    </div>
  
    <div class="group-box" *ngFor="let group of filters; let i = index">
      <div class="group-header">
        <button class="btn btn-remove" (click)="removeGroup(i)">âœ• Remove Group {{ i + 1 }}</button>
        <button class="btn add-item" (click)="addRule(i)">+ Add Item</button>
      </div>
  
      <div class="rules">
        <div class="rule-box" *ngFor="let rule of group.rules; let j = index">
          <div class="rule-line">
            <button class="btn btn-remove" (click)="removeRule(i, j)">Remove Item</button>
  
            <ng-container *ngIf="j > 0">
              <select class="select condition-inline" [(ngModel)]="rule.condition">
                <option value="AND">AND</option>
                <option value="OR">OR</option>
              </select>
            </ng-container>
  
            <div class="form-section">
              <label>Entity:</label>
              <select class="select" [(ngModel)]="rule.entity" (change)="onEntityChange(rule)">
                <option *ngFor="let entity of entities" [value]="entity.name">{{ entity.name }}</option>
              </select>
            </div>
  
           
            <div class="form-section">
              <label>Field:</label>
              <select class="select" [(ngModel)]="rule.field">
                <option *ngFor="let field of getFields(rule.entity)" [value]="field">{{ field }}</option>
              </select>
            </div>
  
            <ng-container *ngIf="shouldShowConditionAndType(rule.field)">
            <div class="form-section">
              <label>Condition:</label>
              <select class="select" [(ngModel)]="rule.operator">
                <option *ngFor="let op of operators" [value]="op">{{ op }}</option>
              </select>
            </div>
  
            <div class="form-section">
              <label>Type:</label>
              <select class="select" [(ngModel)]="rule.type">
                <option value="ALL">All</option>
                <option value="ANY">At Least One</option>
              </select>
            </div>
            </ng-container>
  
            <div class="form-section">
              <label>Value:</label>
              <ng-container [ngSwitch]="getFieldType(rule.field)">
                <input class="input" *ngSwitchCase="'text'" type="text" [(ngModel)]="rule.value" />
                <select class="select" *ngSwitchCase="'dropdown'" [(ngModel)]="rule.value">
                  <option *ngFor="let opt of getDropdownOptions(rule.field)" [value]="opt">{{ opt }}</option>
                </select>
                <input class="input" *ngSwitchCase="'date'" type="date" [(ngModel)]="rule.value" />
              </ng-container>
            </div>
          </div>
        </div>
      </div>
    </div>
  
    <div class="submit-section">
      <button class="btn submit-btn" (click)="submitFilters()">Submit</button>
    </div>
  
    <div class="output" *ngIf="submitted">
      <h3>Submitted Filter Configuration</h3>
      <pre>{{ filters | json }}</pre>
    </div>
  </div>




  filters = [
    {
      rules: [
        {
          condition: 'AND',
          entity: '',
          field: '',
          operator: '',
          type: '',
          value: ''
        }
      ]
    }
  ];

  entities = [
    { name: 'Account', fields: ['Account Name', 'Account Number', 'isPrimary'] },
    { name: 'Payment', fields: ['Payment ID', 'Amount', 'isPrimary'] }
  ];

  operators = ['equals', 'not equals', 'contains', 'not contains', 'starts with', 'ends with'];

  addGroup() {
    this.filters.push({ rules: [] });
  }

  removeGroup(index: number) {
    this.filters.splice(index, 1);
  }

  addRule(groupIndex: number) {
    this.filters[groupIndex].rules.push({
      condition: 'AND',
      entity: '',
      field: '',
      operator: '',
      type: '',
      value: ''
    });
  }

  removeRule(groupIndex: number, ruleIndex: number) {
    this.filters[groupIndex].rules.splice(ruleIndex, 1);
  }

  getFields(entityName: string): string[] {
    const entity = this.entities.find(e => e.name === entityName);
    return entity ? entity.fields : [];
  }

  onEntityChange(rule: any) {
    rule.field = '';
    rule.operator = '';
    rule.type = '';
    rule.value = '';
  }

  getFieldType(field: string): 'text' | 'dropdown' | 'date' {
    if (!field) return 'text';
    const dropdownFields = ['isPrimary'];
    const dateFields = ['createdAt', 'updatedAt'];
    if (dropdownFields.includes(field)) return 'dropdown';
    if (dateFields.includes(field)) return 'date';
    return 'text';
  }

  getDropdownOptions(field: string): string[] {
    const dropdownOptions: { [key: string]: string[] } = {
      isPrimary: ['Yes', 'No']
    };
    return dropdownOptions[field] || [];
  }

  submitFilters() {
    this.submitted = true;
  }

  shouldShowConditionAndType(field: string): boolean {
    return field !== 'isPrimary';
  }
  
  submitted = false;